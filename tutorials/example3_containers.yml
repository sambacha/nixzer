---
- name: Deploy Containerized Application Stack
  hosts: container_hosts
  become: yes
  
  tasks:
    - name: Install Docker
      package:
        name:
          - docker.io
          - docker-compose
        state: present
    
    - name: Create docker user
      user:
        name: dockeruser
        groups: docker
        shell: /bin/bash
        createhome: yes
        comment: "Docker Service User"
    
    - name: Start and enable Docker
      service:
        name: docker
        state: started
        enabled: yes
    
    - name: Create application directory
      file:
        path: /opt/myapp
        state: directory
        owner: dockeruser
        group: dockeruser
        mode: '0755'
    
    - name: Deploy docker-compose configuration
      copy:
        content: |
          version: '3.8'
          
          services:
            web:
              image: nginx:1.21-alpine
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx.conf:/etc/nginx/nginx.conf:ro
                - ./html:/usr/share/nginx/html:ro
              restart: unless-stopped
              depends_on:
                - api
            
            api:
              image: python:3.9-alpine
              ports:
                - "8000:8000"
              environment:
                - DATABASE_URL=postgresql://api:secret@db:5432/apidb
                - REDIS_URL=redis://cache:6379/0
              volumes:
                - ./app:/app
              working_dir: /app
              command: python app.py
              restart: unless-stopped
              depends_on:
                - db
                - cache
            
            db:
              image: postgres:13-alpine
              environment:
                - POSTGRES_DB=apidb
                - POSTGRES_USER=api
                - POSTGRES_PASSWORD=secret
              volumes:
                - postgres_data:/var/lib/postgresql/data
                - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
              restart: unless-stopped
            
            cache:
              image: redis:6-alpine
              volumes:
                - redis_data:/data
              restart: unless-stopped
          
          volumes:
            postgres_data:
            redis_data:
          
          networks:
            default:
              name: myapp-network
        dest: /opt/myapp/docker-compose.yml
        owner: dockeruser
        group: dockeruser
        mode: '0644'
    
    - name: Deploy NGINX configuration
      copy:
        content: |
          events {
              worker_connections 1024;
          }
          
          http {
              upstream api {
                  server api:8000;
              }
              
              server {
                  listen 80;
                  server_name localhost;
                  
                  location / {
                      root /usr/share/nginx/html;
                      index index.html;
                  }
                  
                  location /api/ {
                      proxy_pass http://api/;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                  }
              }
          }
        dest: /opt/myapp/nginx.conf
        owner: dockeruser
        group: dockeruser
        mode: '0644'
    
    - name: Deploy database initialization
      copy:
        content: |
          CREATE TABLE users (
              id SERIAL PRIMARY KEY,
              username VARCHAR(50) UNIQUE NOT NULL,
              email VARCHAR(100) UNIQUE NOT NULL,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          
          INSERT INTO users (username, email) VALUES 
              ('admin', 'admin@example.com'),
              ('user1', 'user1@example.com');
        dest: /opt/myapp/init.sql
        owner: dockeruser
        group: dockeruser
        mode: '0644'
    
    - name: Start application stack
      docker_compose:
        project_src: /opt/myapp
        state: present
      become_user: dockeruser
    
    - name: Setup container monitoring script
      copy:
        content: |
          #!/bin/bash
          # Container health check script
          cd /opt/myapp
          
          if ! docker-compose ps | grep -q "Up"; then
              echo "$(date): Containers not running, restarting..."
              docker-compose restart
          fi
        dest: /usr/local/bin/check-containers.sh
        mode: '0755'
    
    - name: Schedule container health checks
      cron:
        name: "Container health check"
        minute: "*/5"
        job: "/usr/local/bin/check-containers.sh >> /var/log/container-check.log 2>&1"
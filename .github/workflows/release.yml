name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  # Build and test before release
  test:
    name: Test Before Release
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  # Build release artifacts
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-linux
          - os: macos-latest
            target: x86_64-darwin
          - os: macos-latest
            target: aarch64-darwin
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Build Dozer package
        run: |
          nix build .#dozer --print-build-logs
          cp -rL result dozer-${{ matrix.target }}
          tar -czf dozer-${{ matrix.target }}.tar.gz dozer-${{ matrix.target }}

      - name: Build standalone converter
        run: |
          nix bundle .#dozer --bundler github:NixOS/bundlers#toArx -o dozer-standalone
          mv dozer-standalone dozer-standalone-${{ matrix.target }}

      - name: Generate SHA256 checksums
        run: |
          sha256sum dozer-${{ matrix.target }}.tar.gz > dozer-${{ matrix.target }}.tar.gz.sha256
          sha256sum dozer-standalone-${{ matrix.target }} > dozer-standalone-${{ matrix.target }}.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.target }}
          path: |
            dozer-*.tar.gz
            dozer-*.sha256
            dozer-standalone-*

  # Build Docker image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-artifacts, build-docker]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          echo "# Release $VERSION" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## What's Changed" >> CHANGELOG.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            git log --pretty=format:"* %s (%h)" $LAST_TAG..HEAD >> CHANGELOG.md
          else
            git log --pretty=format:"* %s (%h)" HEAD~20..HEAD >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Installation" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Using Nix Flakes" >> CHANGELOG.md
          echo '```bash' >> CHANGELOG.md
          echo "nix run github:${{ github.repository }}/$VERSION" >> CHANGELOG.md
          echo '```' >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Using Docker" >> CHANGELOG.md
          echo '```bash' >> CHANGELOG.md
          echo "docker run ghcr.io/${{ github.repository }}:$VERSION" >> CHANGELOG.md
          echo '```' >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Standalone Binary" >> CHANGELOG.md
          echo "Download the appropriate \`dozer-standalone-*\` file for your platform from the release assets." >> CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.sha256
            artifacts/**/dozer-standalone-*
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true

  # Update Nix flake
  update-flake:
    name: Update Flake Lock
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Update flake.lock
        run: |
          nix flake update
          
      - name: Commit and push
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          if git diff --quiet flake.lock; then
            echo "No changes to flake.lock"
          else
            git add flake.lock
            git commit -m "chore: update flake.lock for release ${{ github.ref_name }}"
            git push
          fi

  # Publish to Cachix
  publish-cachix:
    name: Publish to Cachix
    runs-on: ubuntu-latest
    needs: create-release
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Setup Cachix
        uses: cachix/cachix-action@v12
        with:
          name: dozer
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          skipPush: false

      - name: Build and push to cache
        run: |
          nix build .#dozer --print-build-logs
          nix build .#validationEnv --print-build-logs
          nix build .#checks.x86_64-linux.unit-tests --print-build-logs

  # Announce release
  announce:
    name: Announce Release
    runs-on: ubuntu-latest
    needs: [create-release, publish-cachix]
    steps:
      - name: Send notification
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          MESSAGE="ðŸš€ Dozer $VERSION has been released! Check it out at https://github.com/${{ github.repository }}/releases/tag/$VERSION"
          
          # Could send to Slack, Discord, etc.
          echo "$MESSAGE"
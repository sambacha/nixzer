name: Continuous Integration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quick checks that should pass before anything else
  pre-checks:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      should-test: ${{ steps.check.outputs.should-test }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if tests should run
        id: check
        run: |
          # Check if only docs changed
          if git diff --name-only HEAD^ HEAD | grep -qvE '\.(md|txt)$'; then
            echo "should-test=true" >> $GITHUB_OUTPUT
          else
            echo "should-test=false" >> $GITHUB_OUTPUT
          fi

      - name: Check commit message
        if: github.event_name == 'pull_request'
        run: |
          # Ensure commit messages follow conventional commits
          commit_regex='^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+'
          if ! git log -1 --pretty=%B | grep -qE "$commit_regex"; then
            echo "⚠️ Commit message doesn't follow conventional commits format"
          fi

  # Lint and format checks
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should-test == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Check Python formatting (black)
        run: |
          nix develop --command bash -c "
            pip install black
            black --check --diff lib/ tests/ *.py
          " || echo "::warning::Python formatting issues found"

      - name: Check Python linting (flake8)
        run: |
          nix develop --command bash -c "
            pip install flake8
            flake8 lib/ tests/ --max-line-length=100 --ignore=E501,W503
          " || echo "::warning::Python linting issues found"

      - name: Check Nix formatting
        run: |
          nix develop --command nixpkgs-fmt --check *.nix nix/

      - name: Check shell scripts
        run: |
          find . -name "*.sh" -exec shellcheck {} \; || echo "::warning::Shell script issues found"

  # Type checking
  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should-test == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Run mypy
        run: |
          nix develop --command bash -c "
            pip install mypy types-PyYAML
            mypy lib/ --ignore-missing-imports --no-strict-optional
          " || echo "::warning::Type checking issues found"

  # Unit tests with coverage
  test-unit:
    name: Unit Tests with Coverage
    runs-on: ${{ matrix.os }}
    needs: [lint, type-check]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python: ["3.10", "3.11", "3.12"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Run unit tests
        run: |
          nix develop --command python tests/unit/run_tests.py --coverage --export coverage.json

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest' && matrix.python == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Archive coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.os }}-${{ matrix.python }}
          path: |
            coverage.json
            htmlcov/

  # Property-based tests
  test-property:
    name: Property-based Tests
    runs-on: ubuntu-latest
    needs: [lint, type-check]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Run hypothesis tests
        run: |
          nix develop --command bash -c "
            pip install hypothesis
            python -m pytest tests/unit/test_property_based.py -v --hypothesis-show-statistics
          "

      - name: Upload hypothesis database
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: hypothesis-database
          path: .hypothesis/

  # Contract tests
  test-contracts:
    name: Contract Tests
    runs-on: ubuntu-latest
    needs: [lint, type-check]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Run contract tests
        run: |
          nix develop --command python -m unittest tests.unit.test_contracts -v

  # Performance regression tests
  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test-unit
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Download previous benchmark results
        uses: actions/cache@v4
        with:
          path: previous-benchmarks.json
          key: benchmarks-${{ github.sha }}
          restore-keys: |
            benchmarks-

      - name: Run benchmarks
        run: |
          nix develop --command python tests/unit/test_benchmarks.py --output current-benchmarks.json

      - name: Compare benchmarks
        if: success()
        run: |
          if [ -f previous-benchmarks.json ]; then
            nix develop --command python tests/unit/test_benchmarks.py \
              --compare previous-benchmarks.json current-benchmarks.json
          fi
          cp current-benchmarks.json previous-benchmarks.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: current-benchmarks.json

  # Nix-specific tests
  test-nix:
    name: Nix Tests
    runs-on: ubuntu-latest
    needs: [lint, type-check]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Run flake checks
        run: nix flake check --print-build-logs

      - name: Build all packages
        run: |
          nix build .#dozer
          nix build .#validationEnv
          nix build .#convertWebserver
          nix build .#convertDatabase

      - name: Test all apps
        run: |
          nix run .#dozer -- --help
          nix run .#convert -- --help
          nix run .#simple-convert -- --help

  # Mutation testing
  test-mutation:
    name: Mutation Testing
    runs-on: ubuntu-latest
    needs: test-unit
    if: github.event_name == 'pull_request'
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Run mutation tests
        run: |
          nix develop --command bash -c "
            pip install mutmut
            mutmut run --paths-to-mutate lib/converters --runner 'python -m pytest tests/unit/test_critical_path.py'
            mutmut results
          "

      - name: Generate mutation report
        if: always()
        run: |
          nix develop --command mutmut html
          
      - name: Upload mutation report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: mutation-report
          path: html/

  # Documentation tests
  test-docs:
    name: Documentation Tests
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          config-file: '.github/markdown-link-check.json'

      - name: Test code examples in docs
        run: |
          # Extract and test code blocks from markdown
          find . -name "*.md" -exec grep -l '```python' {} \; | while read file; do
            echo "Testing code examples in $file"
            # Extract Python code blocks and test them
          done

  # Final summary
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test-unit, test-property, test-contracts, test-performance, test-nix]
    if: always()
    steps:
      - name: Create summary
        run: |
          echo "# CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.test-unit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Property Tests | ${{ needs.test-property.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Contract Tests | ${{ needs.test-contracts.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.test-performance.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Nix Tests | ${{ needs.test-nix.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Set overall status
          if [ "${{ needs.test-unit.result }}" == "success" ] && \
             [ "${{ needs.test-nix.result }}" == "success" ]; then
            echo "✅ **All required tests passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some required tests failed.**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi